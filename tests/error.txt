Unsupported conversion from f16 to f16
LLVM ERROR: Unsupported rounding mode for conversion.
#blocked = #ttg.blocked<{sizePerThread = [2, 2], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#shared = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:75", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @fused_moe_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.di
visibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility 
= 16 : i32}, %arg6: !tt.ptr<i32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<i32> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<i32> {tt.divisibility = 16 : i32}
, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 
: i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibilit
y = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x32xf32, #blocked>
    %c64_i32 = arith.constant 64 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c15_i32 = arith.constant 15 : i32
    %c31_i32 = arith.constant 31 : i32
    %c63_i32 = arith.constant 63 : i32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x64xf16, #blocked1>
    %c4_i32 = arith.constant 4 : i32
    %c16_i32 = arith.constant 16 : i32
    %c32_i32 = arith.constant 32 : i32
    %cst_1 = arith.constant dense<2> : tensor<16x1xi64, #blocked1>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %cst_3 = arith.constant dense<64> : tensor<16x64xi32, #blocked1>
    %0 = tt.get_program_id x : i32
    %1 = arith.addi %arg11, %c15_i32 : i32
    %2 = arith.divsi %1, %c16_i32 : i32
    %3 = arith.addi %arg9, %c31_i32 : i32
    %4 = arith.divsi %3, %c32_i32 : i32
    %5 = arith.muli %4, %c4_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c4_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = arith.minsi %8, %c4_i32 : i32
    %10 = arith.remsi %0, %5 : i32
    %11 = arith.remsi %10, %9 : i32
    %12 = arith.addi %7, %11 : i32
    %13 = arith.divsi %10, %9 : i32
    %14 = tt.load %arg8 : !tt.ptr<i32>
    %15 = arith.muli %12, %c16_i32 : i32
    %16 = arith.cmpi sge, %15, %14 : i32
    cf.cond_br %16, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    tt.return
  ^bb2:  // pred: ^bb0
    %17 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %18 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %19 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %20 = tt.splat %15 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %21 = tt.splat %15 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %22 = tt.splat %15 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %23 = arith.addi %20, %17 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %24 = arith.addi %21, %18 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %25 = arith.addi %22, %19 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %26 = tt.splat %arg6 : !tt.ptr<i32> -> tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %27 = tt.splat %arg6 : !tt.ptr<i32> -> tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked}>>
    %28 = tt.splat %arg6 : !tt.ptr<i32> -> tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %29 = tt.addptr %26, %23 : tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %30 = tt.addptr %27, %24 : tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked}>>, tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %31 = tt.addptr %28, %25 : tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked2}>>, tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %32 = tt.load %29 : tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %33 = tt.load %30 : tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked}>>
    %34 = tt.load %31 : tensor<16x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %35 = arith.extsi %32 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %36 = arith.extsi %33 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked}>>
    %37 = arith.extsi %34 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %38 = arith.extsi %arg12 : i32 to i64
    %39 = tt.splat %38 : i64 -> tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %40 = tt.splat %38 : i64 -> tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked}>>
    %41 = tt.splat %38 : i64 -> tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %42 = arith.cmpi slt, %35, %39 : tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %43 = arith.cmpi slt, %36, %40 : tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked}>>
    %44 = arith.cmpi slt, %37, %41 : tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %45 = arith.muli %13, %c32_i32 : i32
    %46 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>>
    %47 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %48 = tt.splat %45 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>>
    %49 = tt.splat %45 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %50 = arith.addi %48, %46 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>>
    %51 = arith.addi %49, %47 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %52 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>>
    %53 = arith.remsi %50, %52 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>>
    %54 = tt.expand_dims %35 {axis = 1 : i32} : tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi64, #blocked1>
    %55 = tt.expand_dims %37 {axis = 1 : i32} : tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<16x1xi64, #blocked2>
    %56 = arith.divsi %54, %cst_1 : tensor<16x1xi64, #blocked1>
    %57 = arith.extsi %arg13 : i32 to i64
    %58 = tt.splat %57 : i64 -> tensor<16x1xi64, #blocked1>
    %59 = arith.muli %56, %58 : tensor<16x1xi64, #blocked1>
    %60 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %61 = tt.expand_dims %60 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1>
    %62 = arith.extsi %61 : tensor<1x64xi32, #blocked1> to tensor<1x64xi64, #blocked1>
    %63 = tt.broadcast %59 : tensor<16x1xi64, #blocked1> -> tensor<16x64xi64, #blocked1>
    %64 = tt.broadcast %62 : tensor<1x64xi64, #blocked1> -> tensor<16x64xi64, #blocked1>
    %65 = arith.addi %63, %64 : tensor<16x64xi64, #blocked1>
    %66 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x64x!tt.ptr<f16>, #blocked1>
    %67 = tt.addptr %66, %65 : tensor<16x64x!tt.ptr<f16>, #blocked1>, tensor<16x64xi64, #blocked1>
    %68 = tt.addptr %arg7, %12 : !tt.ptr<i32>, i32
    %69 = tt.load %68 : !tt.ptr<i32>
    %70 = arith.muli %69, %arg14 : i32
    %71 = tt.addptr %arg1, %70 : !tt.ptr<f16>, i32
    %72 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>>
    %73 = tt.expand_dims %72 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3>
    %74 = tt.splat %arg15 : i32 -> tensor<64x1xi32, #blocked3>
    %75 = arith.muli %73, %74 : tensor<64x1xi32, #blocked3>
    %76 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3>
    %77 = tt.broadcast %75 : tensor<64x1xi32, #blocked3> -> tensor<64x32xi32, #blocked3>
    %78 = tt.broadcast %76 : tensor<1x32xi32, #blocked3> -> tensor<64x32xi32, #blocked3>
    %79 = arith.addi %77, %78 : tensor<64x32xi32, #blocked3>
    %80 = tt.splat %71 : !tt.ptr<f16> -> tensor<64x32x!tt.ptr<f16>, #blocked3>
    %81 = tt.addptr %80, %79 : tensor<64x32x!tt.ptr<f16>, #blocked3>, tensor<64x32xi32, #blocked3>
    %82 = arith.addi %arg10, %c63_i32 : i32
    %83 = arith.divsi %82, %c64_i32 : i32
    %84 = tt.expand_dims %42 {axis = 1 : i32} : tensor<16xi1, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi1, #blocked1>
    %85 = tt.broadcast %84 : tensor<16x1xi1, #blocked1> -> tensor<16x64xi1, #blocked1>
    %86 = arith.muli %arg15, %c64_i32 : i32
    %87 = tt.splat %86 : i32 -> tensor<64x32xi32, #blocked3>
    %88:3 = scf.for %arg18 = %c0_i32 to %83 step %c1_i32 iter_args(%arg19 = %cst, %arg20 = %67, %arg21 = %81) -> (tensor<16x32xf32, #blocked>, tensor<16x64x!tt.p
tr<f16>, #blocked1>, tensor<64x32x!tt.ptr<f16>, #blocked3>)  : i32 {
      %112 = tt.load %arg20, %85, %cst_0 : tensor<16x64x!tt.ptr<f16>, #blocked1>
      %113 = tt.load %arg21 : tensor<64x32x!tt.ptr<f16>, #blocked3>
      %114 = tt.fp_to_fp %112 : tensor<16x64xf16, #blocked1> -> tensor<16x64xf32, #blocked1>
      %115 = ttg.local_alloc %114 : (tensor<16x64xf32, #blocked1>) -> !ttg.memdesc<16x64xf32, #shared, #smem>
      %116 = ttg.local_load %115 : !ttg.memdesc<16x64xf32, #shared, #smem> -> tensor<16x64xf32, #ttg.dot_op<{opIdx = 0, parent = #blocked}>>
      %117 = tt.fp_to_fp %113 : tensor<64x32xf16, #blocked3> -> tensor<64x32xf32, #blocked3>
      %118 = ttg.local_alloc %117 : (tensor<64x32xf32, #blocked3>) -> !ttg.memdesc<64x32xf32, #shared, #smem>
      %119 = ttg.local_load %118 : !ttg.memdesc<64x32xf32, #shared, #smem> -> tensor<64x32xf32, #ttg.dot_op<{opIdx = 1, parent = #blocked}>>
      %120 = tt.dot %116, %119, %arg19, inputPrecision = tf32 : tensor<16x64xf32, #ttg.dot_op<{opIdx = 0, parent = #blocked}>> * tensor<64x32xf32, #ttg.dot_op<{o
pIdx = 1, parent = #blocked}>> -> tensor<16x32xf32, #blocked>
      %121 = tt.addptr %arg20, %cst_3 : tensor<16x64x!tt.ptr<f16>, #blocked1>, tensor<16x64xi32, #blocked1>
      %122 = tt.addptr %arg21, %87 : tensor<64x32x!tt.ptr<f16>, #blocked3>, tensor<64x32xi32, #blocked3>
      scf.yield %120, %121, %122 : tensor<16x32xf32, #blocked>, tensor<16x64x!tt.ptr<f16>, #blocked1>, tensor<64x32x!tt.ptr<f16>, #blocked3>
    }
    %89 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #blocked}>>
    %90 = tt.addptr %89, %36 : tensor<16x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #blocked}>>, tensor<16xi64, #ttg.slice<{dim = 1, parent = #blocked}>>
    %91 = tt.load %90, %43, %cst_2 : tensor<16x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #blocked}>>
    %92 = tt.expand_dims %91 {axis = 1 : i32} : tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked>
    %93 = tt.broadcast %92 : tensor<16x1xf32, #blocked> -> tensor<16x32xf32, #blocked>
    %94 = arith.mulf %88#0, %93 : tensor<16x32xf32, #blocked>
    %95 = arith.truncf %94 : tensor<16x32xf32, #blocked> to tensor<16x32xf16, #blocked>
    %96 = arith.extsi %arg16 : i32 to i64
    %97 = tt.splat %96 : i64 -> tensor<16x1xi64, #blocked2>
    %98 = arith.muli %97, %55 : tensor<16x1xi64, #blocked2>
    %99 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<16x1x!tt.ptr<f16>, #blocked2>
    %100 = tt.addptr %99, %98 : tensor<16x1x!tt.ptr<f16>, #blocked2>, tensor<16x1xi64, #blocked2>
    %101 = tt.expand_dims %51 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2>
    %102 = tt.broadcast %100 : tensor<16x1x!tt.ptr<f16>, #blocked2> -> tensor<16x32x!tt.ptr<f16>, #blocked2>
    %103 = tt.broadcast %101 : tensor<1x32xi32, #blocked2> -> tensor<16x32xi32, #blocked2>
    %104 = tt.addptr %102, %103 : tensor<16x32x!tt.ptr<f16>, #blocked2>, tensor<16x32xi32, #blocked2>
    %105 = tt.expand_dims %44 {axis = 1 : i32} : tensor<16xi1, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<16x1xi1, #blocked2>
    %106 = tt.splat %arg9 : i32 -> tensor<1x32xi32, #blocked2>
    %107 = arith.cmpi slt, %101, %106 : tensor<1x32xi32, #blocked2>
    %108 = tt.broadcast %105 : tensor<16x1xi1, #blocked2> -> tensor<16x32xi1, #blocked2>
    %109 = tt.broadcast %107 : tensor<1x32xi1, #blocked2> -> tensor<16x32xi1, #blocked2>
    %110 = arith.andi %108, %109 : tensor<16x32xi1, #blocked2>
    %111 = ttg.convert_layout %95 : tensor<16x32xf16, #blocked> -> tensor<16x32xf16, #blocked2>
    tt.store %104, %111, %110 : tensor<16x32x!tt.ptr<f16>, #blocked2>
    tt.return
  }
}

{-#
  external_resources: {
    mlir_reproducer: {
      pipeline: "builtin.module(triton-nvidia-mma-lowering, tritongpu-combine-tensor-select-and-if, tritongpu-allocate-warp-groups, convert-scf-to-cf, allocate-s
hared-memory, triton-tensor-memory-allocation, tritongpu-global-scratch-memory-allocation, convert-triton-gpu-to-llvm{compute-capability=75 ptx-version=84}, cano
nicalize{  max-iterations=10 max-num-rewrites=-1 region-simplify=normal test-convergence=false top-down=true}, cse, convert-nv-gpu-to-llvm, convert-warp-speciali
ze-to-llvm, canonicalize{  max-iterations=10 max-num-rewrites=-1 region-simplify=normal test-convergence=false top-down=true}, cse, symbol-dce, enable-line-info)
",
      disable_threading: false,
      verify_each: true
    }
  }
#-}
/root/triton/sglang/fused_moe_kernel/test_fused_moe_kernel.py:9:0: error: Failures have been detected while processing an MLIR pass pipeline
/root/triton/sglang/fused_moe_kernel/test_fused_moe_kernel.py:9:0: note: Pipeline failed while executing [`ConvertTritonGPUToLLVM` on 'builtin.module' operation]
: reproducer generated at `std::errs, please share the reproducer above with Triton project.`
Traceback (most recent call last):
  File "/root/triton/sglang/fused_moe_kernel/test_fused_moe_kernel.py", line 296, in <module>
    result = fused_moe()
  File "/root/triton/sglang/fused_moe_kernel/test_fused_moe_kernel.py", line 250, in fused_moe
    fused_moe_kernel[grid](
  File "/root/miniconda3/envs/cuda-env/lib/python3.10/site-packages/triton/runtime/jit.py", line 347, in <lambda>
    return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)
  File "/root/miniconda3/envs/cuda-env/lib/python3.10/site-packages/triton/runtime/jit.py", line 569, in run
    kernel = self.compile(src, target=target, options=options.__dict__)
  File "/root/miniconda3/envs/cuda-env/lib/python3.10/site-packages/triton/compiler/compiler.py", line 284, in compile
    next_module = compile_ir(module, metadata)
  File "/root/miniconda3/envs/cuda-env/lib/python3.10/site-packages/triton/backends/nvidia/compiler.py", line 450, in <lambda>
    stages["llir"] = lambda src, metadata: self.make_llir(src, metadata, options, capability)
  File "/root/miniconda3/envs/cuda-env/lib/python3.10/site-packages/triton/backends/nvidia/compiler.py", line 341, in make_llir
    pm.run(mod)
RuntimeError: PassManager::run failed
